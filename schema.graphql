# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BlockField implements Field {
  cardinality: Cardinality!
  description: String
  id: ID!
  name: String!
  nullable: Boolean!
  updatedAt: DateTime!
}

type BooleanCell implements Cell {
  booleanValue: Boolean!
  id: ID!
  name: String!
}

type BooleanField implements Field {
  description: String
  id: ID!
  name: String!
  nullable: Boolean!
  updatedAt: DateTime!
}

enum Cardinality {
  MANY
  ONE
}

interface Cell {
  id: ID!
  name: String!
}

interface Change {
  nodeId: ID!
}

type CreateFieldChange implements Change {
  nodeId: ID!
}

input CreateFieldInput {
  description: String
  leftId: ID!
  name: String!
  position: Int
  versionId: ID!
}

input CreateGraphInput {
  name: String!
}

input CreateRowInput {
  parent: ParentInput
  versionId: ID!
}

input CreateVersionInput {
  versionId: ID!
}

input CreateViewInput {
  graphId: ID!
  name: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

type DateCell implements Cell {
  dateValue: Date
  id: ID!
  name: String!
}

type DateField implements Field {
  description: String
  id: ID!
  name: String!
  nullable: Boolean!
  updatedAt: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DateTimeCell implements Cell {
  dateTimeValue: DateTime
  id: ID!
  name: String!
}

type DateTimeField implements Field {
  description: String
  id: ID!
  name: String!
  nullable: Boolean!
  updatedAt: DateTime!
}

type DeleteFieldChange implements Change {
  nodeId: ID!
}

input DeleteFieldInput {
  nodeId: ID!
  versionId: ID!
}

input DeleteGraphInput {
  graphId: ID!
}

input DeleteRowsInput {
  rowIds: [ID!]!
}

input DeleteVersionInput {
  versionId: ID!
}

input DeleteViewInput {
  viewId: ID!
}

type Edge {
  id: ID!
  left: Field!
  position: Int!
  right: Field!
}

interface Field {
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type FieldDescriptionChange implements Change {
  from: String!
  nodeId: ID!
  to: String!
}

type FieldNameChange implements Change {
  from: String!
  nodeId: ID!
  to: String!
}

type FieldNullableChange implements Change {
  from: Boolean!
  nodeId: ID!
  to: Boolean!
}

type FieldParentChange implements Change {
  from: ID!
  nodeId: ID!
  to: ID!
}

type FieldPositionChange implements Change {
  from: Int!
  nodeId: ID!
  to: Int!
}

enum FieldType {
  BLOCK
  BOOLEAN
  DATE
  DATE_TIME
  FILE
  NUMBER
  ROOT
  SELECT
  TEXT
}

type FileField implements Field {
  cardinality: Cardinality!
  description: String
  id: ID!
  name: String!
  nullable: Boolean!
  updatedAt: DateTime!
}

type FloatCell implements Cell {
  floatValue: Float
  id: ID!
  name: String!
}

type Graph {
  color: String!
  createdAt: DateTime!
  id: ID!
  root: RootField!
  rows(parentFieldId: ID, parentId: ID): [Row!]!
  version: Version!
  versions: [Version!]!
  view: View!
  views: [View!]!
}

type IntCell implements Cell {
  id: ID!
  intValue: Int
  name: String!
}

input LockVersionInput {
  versionId: ID!
}

input MoveFieldInput {
  leftId: ID!
  nodeId: ID!
  position: Int!
  versionId: ID!
}

type Mutation {
  createBlockField(input: CreateFieldInput!): Edge!
  createBooleanField(input: CreateFieldInput!): Edge!
  createDateField(input: CreateFieldInput!): Edge!
  createDateTimeField(input: CreateFieldInput!): Edge!
  createFileField(input: CreateFieldInput!): Edge!
  createGraph(input: CreateGraphInput!): Graph!
  createNumberField(input: CreateFieldInput!): Edge!
  createRow(input: CreateRowInput!): Row!
  createTextField(input: CreateFieldInput!): Edge!
  createVersion(input: CreateVersionInput!): Version!
  createView(input: CreateViewInput!): View!
  deleteField(input: DeleteFieldInput!): Field!
  deleteGraph(input: DeleteGraphInput!): Graph!
  deleteRows(input: DeleteRowsInput!): [Row!]!
  deleteVersion(input: DeleteVersionInput!): Version!
  deleteView(input: DeleteViewInput!): View!
  lockVersion(input: LockVersionInput!): Version!
  moveField(input: MoveFieldInput!): Edge!
  setFieldDescription(input: SetFieldDescriptionInput!): Field!
  setFieldHidden(input: SetFieldHiddenInput!): View!
  setFieldName(input: SetFieldNameInput!): Field!
  setFieldNullable(input: SetFieldNullableInput!): Field!
  setViewName(input: SetViewNameInput!): Field!
  unlockVersion(input: UnlockVersionInput!): Version!
  updateBooleanCell(input: UpdateBooleanCellInput!): Row!
  updateDateCell(input: UpdateDateCellInput!): Row!
  updateDateTimeCell(input: UpdateDateTimeCellInput!): Row!
  updateFloatCell(input: UpdateFloatCellInput!): Row!
  updateIntCell(input: UpdateIntCellInput!): Row!
  updateTextCell(input: UpdateTextCellInput!): Row!
}

type NumberField implements Field {
  description: String
  id: ID!
  name: String!
  nullable: Boolean!
  updatedAt: DateTime!
}

input ParentInput {
  fieldId: ID!
  id: ID!
}

type Query {
  graph(graphId: ID!): Graph
  graphs: [Graph!]!
  version(versionId: ID!): Version
  view(viewId: ID!): View
}

type RootField implements Field {
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type Row {
  cells: [Cell!]!
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input SetFieldDescriptionInput {
  description: String!
  nodeId: ID!
  versionId: ID!
}

input SetFieldHiddenInput {
  hidden: Boolean!
  nodeId: ID!
  viewId: ID!
}

input SetFieldNameInput {
  name: String!
  nodeId: ID!
  versionId: ID!
}

input SetFieldNullableInput {
  nodeId: ID!
  nullable: Boolean!
  versionId: ID!
}

input SetViewNameInput {
  name: String!
  viewId: ID!
}

type TextCell implements Cell {
  id: ID!
  name: String!
  textValue: String
}

type TextField implements Field {
  description: String
  id: ID!
  name: String!
  nullable: Boolean!
  updatedAt: DateTime!
}

input UnlockVersionInput {
  versionId: ID!
}

input UpdateBooleanCellInput {
  fieldId: ID!
  rowId: ID!
  value: Boolean!
}

input UpdateDateCellInput {
  fieldId: ID!
  rowId: ID!
  value: Date!
}

input UpdateDateTimeCellInput {
  fieldId: ID!
  rowId: ID!
  value: DateTime!
}

input UpdateFloatCellInput {
  fieldId: ID!
  rowId: ID!
  value: Float!
}

input UpdateIntCellInput {
  fieldId: ID!
  rowId: ID!
  value: Int!
}

input UpdateTextCellInput {
  fieldId: ID!
  rowId: ID!
  value: String!
}

type Version {
  createdAt: DateTime!
  diff(versionId: ID!): [Change!]!
  edges(leftId: ID, type: FieldType): [Edge!]!
  id: ID!
  lockedAt: DateTime
  rows(parentFieldId: ID, parentId: ID): [Row!]!
}

type View {
  createdAt: DateTime!
  description: String
  edges(leftId: ID, type: FieldType): [Edge!]!
  id: ID!
  name: String!
  updatedAt: DateTime!
}
