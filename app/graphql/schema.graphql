# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type BlockField implements Field {
  cardinality: Cardinality!
  description: String
  id: ID!
  name: String!
  nullable: Boolean!
  updatedAt: DateTime!
}

type BooleanField implements Field {
  description: String
  id: ID!
  name: String!
  nullable: Boolean!
  updatedAt: DateTime!
}

enum Cardinality {
  MANY
  ONE
}

interface Change {
  nodeId: ID!
}

type CreateFieldChange implements Change {
  nodeId: ID!
}

input CreateFieldInput {
  description: String
  leftId: ID!
  name: String!
  position: Int
  versionId: ID!
}

input CreateGraphInput {
  name: String!
}

input CreateRowInput {
  parent: ParentInput
  versionId: ID!
}

input CreateVersionInput {
  versionId: ID!
}

input CreateViewInput {
  graphId: ID!
  name: String!
}

type DateField implements Field {
  description: String
  id: ID!
  name: String!
  nullable: Boolean!
  updatedAt: DateTime!
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

type DateTimeField implements Field {
  description: String
  id: ID!
  name: String!
  nullable: Boolean!
  updatedAt: DateTime!
}

type DeleteFieldChange implements Change {
  nodeId: ID!
}

input DeleteFieldInput {
  nodeId: ID!
  versionId: ID!
}

input DeleteGraphInput {
  graphId: ID!
}

input DeleteRowsInput {
  rowIds: [ID!]!
}

input DeleteVersionInput {
  versionId: ID!
}

input DeleteViewInput {
  viewId: ID!
}

type Edge {
  id: ID!
  left: Field!
  position: Int!
  right: Field!
}

interface Field {
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type FieldDescriptionChange implements Change {
  from: String!
  nodeId: ID!
  to: String!
}

type FieldNameChange implements Change {
  from: String!
  nodeId: ID!
  to: String!
}

type FieldNullableChange implements Change {
  from: Boolean!
  nodeId: ID!
  to: Boolean!
}

type FieldParentChange implements Change {
  from: ID!
  nodeId: ID!
  to: ID!
}

type FieldPositionChange implements Change {
  from: Int!
  nodeId: ID!
  to: Int!
}

enum FieldType {
  BLOCK
  BOOLEAN
  DATE
  DATE_TIME
  FILE
  NUMBER
  ROOT
  SELECT
  TEXT
}

type FileField implements Field {
  cardinality: Cardinality!
  description: String
  id: ID!
  name: String!
  nullable: Boolean!
  updatedAt: DateTime!
}

type Graph {
  color: String!
  createdAt: DateTime!
  id: ID!
  root: RootField!
  rows(parentFieldId: ID, parentId: ID): [Row!]!
  version: Version!
  versions: [Version!]!
  view: View!
  views: [View!]!
}

input LockVersionInput {
  versionId: ID!
}

input MoveFieldInput {
  leftId: ID!
  nodeId: ID!
  position: Int!
  versionId: ID!
}

type Mutation {
  createBlockField(input: CreateFieldInput!): Edge!
  createBooleanField(input: CreateFieldInput!): Edge!
  createDateField(input: CreateFieldInput!): Edge!
  createDateTimeField(input: CreateFieldInput!): Edge!
  createFileField(input: CreateFieldInput!): Edge!
  createGraph(input: CreateGraphInput!): Graph!
  createNumberField(input: CreateFieldInput!): Edge!
  createRow(input: CreateRowInput!): Row!
  createTextField(input: CreateFieldInput!): Edge!
  createVersion(input: CreateVersionInput!): Version!
  createView(input: CreateViewInput!): View!
  deleteField(input: DeleteFieldInput!): Field!
  deleteGraph(input: DeleteGraphInput!): Graph!
  deleteRows(input: DeleteRowsInput!): [Row!]!
  deleteVersion(input: DeleteVersionInput!): Version!
  deleteView(input: DeleteViewInput!): View!
  lockVersion(input: LockVersionInput!): Version!
  moveField(input: MoveFieldInput!): Edge!
  setFieldDescription(input: SetFieldDescriptionInput!): Field!
  setFieldHidden(input: SetFieldHiddenInput!): View!
  setFieldName(input: SetFieldNameInput!): Field!
  setFieldNullable(input: SetFieldNullableInput!): Field!
  setViewName(input: SetViewNameInput!): Field!
  unlockVersion(input: UnlockVersionInput!): Version!
}

type NumberField implements Field {
  description: String
  id: ID!
  name: String!
  nullable: Boolean!
  updatedAt: DateTime!
}

input ParentInput {
  fieldId: ID!
  id: ID!
}

type Query {
  graph(graphId: ID!): Graph
  graphs: [Graph!]!
  version(versionId: ID!): Version
  view(viewId: ID!): View
}

type RootField implements Field {
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime!
}

type Row {
  createdAt: DateTime!
  id: ID!
  updatedAt: DateTime!
}

input SetFieldDescriptionInput {
  description: String!
  nodeId: ID!
  versionId: ID!
}

input SetFieldHiddenInput {
  hidden: Boolean!
  nodeId: ID!
  viewId: ID!
}

input SetFieldNameInput {
  name: String!
  nodeId: ID!
  versionId: ID!
}

input SetFieldNullableInput {
  nodeId: ID!
  nullable: Boolean!
  versionId: ID!
}

input SetViewNameInput {
  name: String!
  viewId: ID!
}

type TextField implements Field {
  description: String
  id: ID!
  name: String!
  nullable: Boolean!
  updatedAt: DateTime!
}

input UnlockVersionInput {
  versionId: ID!
}

type Version {
  createdAt: DateTime!
  diff(versionId: ID!): [Change!]!
  edges(leftId: ID, type: FieldType): [Edge!]!
  id: ID!
  lockedAt: DateTime
  rows(parentFieldId: ID, parentId: ID): [Row!]!
}

type View {
  createdAt: DateTime!
  description: String
  edges(leftId: ID, type: FieldType): [Edge!]!
  id: ID!
  name: String!
  updatedAt: DateTime!
}
