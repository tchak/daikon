// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "referentialIntegrity", "fullTextSearch"]
}

model Graph {
  id        String         @id @default(uuid()) @db.Uuid
  createdAt DateTime       @default(now())
  updatedAt DateTime       @default(now()) @updatedAt
  color     String         @default("blue")
  versions  GraphVersion[]
  views     GraphView[]
  rootId    String         @unique @db.Uuid
  root      GraphNode      @relation(fields: [rootId], references: [internalId], onDelete: Cascade)
}

model GraphVersion {
  id        String      @id @default(uuid()) @db.Uuid
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt
  lockedAt  DateTime?
  graphId   String      @db.Uuid
  graph     Graph       @relation(fields: [graphId], references: [id], onDelete: Cascade)
  edges     GraphEdge[]
  rows      Row[]

  @@index(graphId)
}

enum NodeType {
  ROOT
  TEXT
  NUMBER
  SELECT
  BOOLEAN
  DATE
  DATE_TIME
  FILE
  BLOCK
}

enum NodeCardinality {
  ONE
  MANY
}

model GraphNode {
  internalId  String          @id @default(uuid()) @db.Uuid
  id          String          @default(uuid()) @db.Uuid
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now()) @updatedAt
  type        NodeType
  cardinality NodeCardinality @default(ONE)
  nullable    Boolean         @default(false)
  options     Json            @default("{}")
  name        String
  description String?
  lefts       GraphEdge[]     @relation("left")
  rights      GraphEdge[]     @relation("right")
  graph       Graph?
  rows        Row[]

  @@index(id)
}

model GraphEdge {
  id        String       @id @default(uuid()) @db.Uuid
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now()) @updatedAt
  position  Int          @default(0)
  versionId String       @db.Uuid
  version   GraphVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
  leftId    String       @db.Uuid
  left      GraphNode    @relation("left", fields: [leftId], references: [internalId], onDelete: Cascade)
  rightId   String       @db.Uuid
  right     GraphNode    @relation("right", fields: [rightId], references: [internalId], onDelete: Cascade)

  @@unique([versionId, leftId, position])
  @@unique([versionId, leftId, rightId])
  @@index([versionId, leftId])
  @@index([versionId, rightId])
  @@index(versionId)
}

enum ViewType {
  TABLE
  FORM
}

model GraphView {
  id          String   @id @default(uuid()) @db.Uuid
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  type        ViewType @default(TABLE)
  name        String
  description String?
  graphId     String   @db.Uuid
  graph       Graph    @relation(fields: [graphId], references: [id], onDelete: Cascade)
  hidden      String[]
  filters     Json     @default("{}")
  sort        Json     @default("{}")

  @@index([graphId])
}

model Row {
  id            String       @id @default(uuid()) @db.Uuid
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  data          Json         @default("{}")
  versionId     String       @db.Uuid
  version       GraphVersion @relation(fields: [versionId], references: [id], onDelete: Cascade)
  parentId      String?      @db.Uuid
  parent        Row?         @relation("parent", fields: [parentId], references: [id], onDelete: Cascade)
  parentFieldId String       @db.Uuid
  parentField   GraphNode?   @relation(fields: [parentFieldId], references: [internalId], onDelete: Cascade)
  rows          Row[]        @relation("parent")

  @@index([parentId, parentFieldId])
}
