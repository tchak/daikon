// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["interactiveTransactions", "referentialIntegrity", "fullTextSearch"]
}

model User {
  id          String       @id @db.Uuid
  createdAt   DateTime     @map("created_at")
  updatedAt   DateTime     @map("updated_at")
  deletedAt   DateTime?    @map("deleted_at")
  email       String
  memberships Membership[]

  @@unique(email)
  @@map("users")
}

model Organization {
  id          String    @id @db.Uuid
  createdAt   DateTime  @map("created_at")
  updatedAt   DateTime  @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  name        String
  description String?

  buckets     Bucket[]
  memberships Membership[]

  @@map("organizations")
}

model Membership {
  id             BigInt       @id @default(autoincrement())
  userId         String       @map("user_id") @db.Uuid
  organizationId String       @map("organization_id") @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  role           String

  @@unique([userId, organizationId, role])
  @@map("memberships")
}

model Bucket {
  id             String       @id @db.Uuid
  createdAt      DateTime     @map("created_at")
  updatedAt      DateTime     @map("updated_at")
  deletedAt      DateTime?    @map("deleted_at")
  name           String
  color          String
  description    String?
  organizationId String       @map("organization_id") @db.Uuid
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  schemas        Schema[]
  views          View[]

  @@index(organizationId)
  @@map("buckets")
}

model Schema {
  id        String    @id @default(uuid()) @db.Uuid
  createdAt DateTime  @default(now()) @map("created_at")
  lockedAt  DateTime? @map("locked_at")
  version   Int       @default(0)
  bucketId  String    @map("bucket_id") @db.Uuid
  bucket    Bucket    @relation(fields: [bucketId], references: [id], onDelete: Cascade)
  fields    Json      @default("{}")
  records   Record[]

  @@unique([bucketId, version])
  @@index(bucketId)
  @@map("schemas")
}

model View {
  id          String    @id @db.Uuid
  createdAt   DateTime  @map("created_at")
  updatedAt   DateTime  @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")
  type        String
  name        String
  description String?
  bucketId    String    @map("bucket_id") @db.Uuid
  bucket      Bucket    @relation(fields: [bucketId], references: [id], onDelete: Cascade)
  fields      Json      @default("{}")
  filters     Json      @default("{}")
  sort        Json      @default("{}")

  @@index(bucketId)
  @@map("views")
}

model Record {
  id        String    @id @db.Uuid
  createdAt DateTime  @map("created_at")
  updatedAt DateTime  @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  schemaId  String    @map("schema_id") @db.Uuid
  schema    Schema    @relation(fields: [schemaId], references: [id], onDelete: Cascade)
  path      String[]
  data      Json      @default("{}")


  @@index(schemaId)
  @@index(path)
  @@map("records")
}

model Event {
  id        BigInt    @id @default(autoincrement())
  eventId   String    @map("event_id") @db.Uuid
  eventType String    @map("event_type")
  metadata  Json
  data      Json
  createdAt DateTime  @default(now()) @map("created_at")
  validAt   DateTime? @map("valid_at")

  streams EventInStream[]

  @@unique([eventId])
  @@index([eventType])
  @@index([createdAt])
  @@index([validAt])
  @@map("event_store_events")
}

model EventInStream {
  id        BigInt   @id @default(autoincrement())
  eventId   String   @map("event_id") @db.Uuid
  stream    String
  position  Int?
  createdAt DateTime @default(now()) @map("created_at")

  event Event @relation(fields: [eventId], references: [eventId], onDelete: Cascade)

  @@unique([stream, eventId])
  @@unique([stream, position])
  @@index([createdAt])
  @@map("event_store_events_in_streams")
}
